<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.erp.dao.ProductDao">
    <!-- Search products with various criteria -->
    <select id="selectProductList" parameterType="map" resultType="map">
        SELECT
        p.product_id AS productId,
        p.product_code AS productCode,
        p.product_name AS productName,
        p.description,
        p.price,
        p.cost_price AS costPrice,
        p.unit_of_measure AS unitOfMeasure,
        p.status,
        p.product_type AS productType,
        p.brand,
        p.manufacturer,
        p.creation_date AS creationDate,
        p.last_update_date AS lastUpdateDate,
        NVL(SUM(i.quantity), 0) AS totalStock
        FROM
        products p
        LEFT JOIN
        inventory i ON p.product_id = i.product_id
        WHERE
        p.is_deleted = 'N'
        <if test="keyword != null and keyword != ''">
            AND (
            UPPER(p.product_name) LIKE '%' || UPPER(#{keyword}) || '%'
            OR UPPER(p.product_code) LIKE '%' || UPPER(#{keyword}) || '%'
            OR UPPER(p.description) LIKE '%' || UPPER(#{keyword}) || '%'
            )
        </if>
        <if test="productType != null and productType != '' and productType != 'ALL'">
            AND p.product_type = #{productType}
        </if>
        <if test="minPrice != null">
            AND p.price >= #{minPrice}
        </if>
        <if test="maxPrice != null">
            AND p.price &lt;= #{maxPrice}
        </if>
        <if test="status != null and status != '' and status != 'ALL'">
            AND p.status = #{status}
        </if>
        <if test="categoryId != null and categoryId != ''">
            AND EXISTS (
            SELECT 1 FROM product_categories pc
            WHERE pc.product_id = p.product_id
            AND pc.category_id = #{categoryId}
            )
        </if>
        <if test="brandId != null and brandId != ''">
            AND p.brand = #{brandId}
        </if>
        GROUP BY
        p.product_id,
        p.product_code,
        p.product_name,
        p.description,
        p.price,
        p.cost_price,
        p.unit_of_measure,
        p.status,
        p.product_type,
        p.brand,
        p.manufacturer,
        p.creation_date,
        p.last_update_date
        <if test="hasStock != null and hasStock == true">
            HAVING NVL(SUM(i.quantity), 0) > 0
        </if>
        <if test="sortColumn != null and sortColumn != ''">
            ORDER BY
            <choose>
                <when test="sortColumn == 'productName'">p.product_name</when>
                <when test="sortColumn == 'price'">p.price</when>
                <when test="sortColumn == 'creationDate'">p.creation_date</when>
                <when test="sortColumn == 'totalStock'">totalStock</when>
                <otherwise>p.product_name</otherwise>
            </choose>
            <if test="sortOrder != null and sortOrder.toUpperCase() == 'DESC'">DESC</if>
            <if test="sortOrder == null or sortOrder.toUpperCase() != 'DESC'">ASC</if>
        </if>
    </select>

    <!-- Get product details by ID -->
    <select id="selectProductDetail" parameterType="string" resultType="map">
        SELECT
            p.product_id AS productId,
            p.product_code AS productCode,
            p.product_name AS productName,
            p.description,
            p.price,
            p.cost_price AS costPrice,
            p.unit_of_measure AS unitOfMeasure,
            p.status,
            p.product_type AS productType,
            p.brand,
            p.manufacturer,
            p.barcode,
            p.weight,
            p.dimensions,
            p.tax_class AS taxClass,
            p.is_featured AS isFeatured,
            p.is_digital AS isDigital,
            p.digital_file_path AS digitalFilePath,
            p.min_order_quantity AS minOrderQuantity,
            p.max_order_quantity AS maxOrderQuantity,
            p.reorder_level AS reorderLevel,
            p.is_deleted AS isDeleted,
            p.created_by AS createdBy,
            p.creation_date AS creationDate,
            p.last_updated_by AS lastUpdatedBy,
            p.last_update_date AS lastUpdateDate
        FROM
            products p
        WHERE
            p.product_id = #{productId}
    </select>

    <!-- Get product categories -->
    <select id="selectProductCategories" parameterType="string" resultType="map">
        SELECT
            pc.category_id AS categoryId,
            c.category_name AS categoryName,
            c.parent_category_id AS parentCategoryId,
            pc.creation_date AS assignmentDate
        FROM
            product_categories pc
                JOIN
            categories c ON pc.category_id = c.category_id
        WHERE
            pc.product_id = #{productId}
        ORDER BY
            c.category_name
    </select>

    <!-- Get product images -->
    <select id="selectProductImages" parameterType="string" resultType="map">
        SELECT
            image_id AS imageId,
            product_id AS productId,
            image_url AS imageUrl,
            image_type AS imageType,
            is_primary AS isPrimary,
            created_by AS createdBy,
            creation_date AS creationDate
        FROM
            product_images
        WHERE
            product_id = #{productId}
        ORDER BY
            is_primary DESC,
            creation_date DESC
    </select>

    <!-- Get product price history -->
    <select id="selectProductPriceHistory" parameterType="string" resultType="com.example.erp.dto.PriceHistoryDTO">
        SELECT
            history_id AS historyId,
            product_id AS productId,
            old_price AS oldPrice,
            new_price AS newPrice,
            change_date AS changeDate,
            changed_by AS changedBy,
            remarks
        FROM
            product_price_history
        WHERE
            product_id = #{productId}
        ORDER BY
            change_date DESC
    </select>

    <!-- Get product inventory -->
    <select id="selectProductInventory" parameterType="string" resultType="com.example.erp.dto.InventoryDTO">
        SELECT
            i.inventory_id AS inventoryId,
            i.product_id AS productId,
            i.location_id AS locationId,
            l.location_name AS locationName,
            l.location_type AS locationType,
            i.quantity,
            i.last_update_date AS lastUpdateDate,
            i.last_updated_by AS lastUpdatedBy
        FROM
            inventory i
                JOIN
            locations l ON i.location_id = l.location_id
        WHERE
            i.product_id = #{productId}
        ORDER BY
            l.location_name
    </select>

    <!-- Count product orders -->
    <select id="countProductOrders" parameterType="string" resultType="int">
        SELECT
            COUNT(DISTINCT o.order_id)
        FROM
            order_items oi
                JOIN
            orders o ON oi.order_id = o.order_id
        WHERE
            oi.product_id = #{productId}
    </select>

    <!-- Insert new product -->
    <insert id="insertProduct" parameterType="map">
        INSERT INTO products (
            product_id,
            product_code,
            product_name,
            description,
            price,
            cost_price,
            unit_of_measure,
            status,
            product_type,
            brand,
            manufacturer,
            barcode,
            weight,
            dimensions,
            tax_class,
            is_featured,
            is_digital,
            digital_file_path,
            min_order_quantity,
            max_order_quantity,
            reorder_level,
            is_deleted,
            created_by,
            creation_date,
            last_updated_by,
            last_update_date
        ) VALUES (
                     #{productId},
                     #{productCode},
                     #{productName},
                     #{description},
                     #{price},
                     #{costPrice},
                     #{unitOfMeasure},
                     #{status, jdbcType=VARCHAR},
                     #{productType, jdbcType=VARCHAR},
                     #{brand, jdbcType=VARCHAR},
                     #{manufacturer, jdbcType=VARCHAR},
                     #{barcode, jdbcType=VARCHAR},
                     #{weight, jdbcType=NUMERIC},
                     #{dimensions, jdbcType=VARCHAR},
                     #{taxClass, jdbcType=VARCHAR},
                     #{isFeatured, jdbcType=VARCHAR},
                     #{isDigital, jdbcType=VARCHAR},
                     #{digitalFilePath, jdbcType=VARCHAR},
                     #{minOrderQuantity, jdbcType=NUMERIC},
                     #{maxOrderQuantity, jdbcType=NUMERIC},
                     #{reorderLevel, jdbcType=NUMERIC},
                     'N',
                     #{createdBy},
                     #{creationDate},
                     #{lastUpdatedBy},
                     #{lastUpdateDate}
                 )
    </insert>

    <!-- Update existing product -->
    <update id="updateProduct" parameterType="map">
        UPDATE products
        SET
        product_code = #{productCode, jdbcType=VARCHAR},
        product_name = #{productName},
        description = #{description, jdbcType=VARCHAR},
        <if test="price != null">price = #{price},</if>
        <if test="costPrice != null">cost_price = #{costPrice},</if>
        <if test="unitOfMeasure != null">unit_of_measure = #{unitOfMeasure},</if>
        <if test="status != null">status = #{status},</if>
        <if test="productType != null">product_type = #{productType},</if>
        <if test="brand != null">brand = #{brand},</if>
        <if test="manufacturer != null">manufacturer = #{manufacturer},</if>
        <if test="barcode != null">barcode = #{barcode},</if>
        <if test="weight != null">weight = #{weight},</if>
        <if test="dimensions != null">dimensions = #{dimensions},</if>
        <if test="taxClass != null">tax_class = #{taxClass},</if>
        <if test="isFeatured != null">is_featured = #{isFeatured},</if>
        <if test="isDigital != null">is_digital = #{isDigital},</if>
        <if test="digitalFilePath != null">digital_file_path = #{digitalFilePath},</if>
        <if test="minOrderQuantity != null">min_order_quantity = #{minOrderQuantity},</if>
        <if test="maxOrderQuantity != null">max_order_quantity = #{maxOrderQuantity},</if>
        <if test="reorderLevel != null">reorder_level = #{reorderLevel},</if>
        last_updated_by = #{lastUpdatedBy},
        last_update_date = #{lastUpdateDate}
        WHERE
        product_id = #{productId}
    </update>

    <!-- Update product status (used for deletion) -->
    <update id="updateProductStatus" parameterType="map">
        UPDATE products
        SET
            is_deleted = #{isDeleted} ? 'Y' : 'N',
            status = 'INACTIVE',
            last_updated_by = #{lastUpdatedBy},
            last_update_date = #{lastUpdateDate}
        WHERE
            product_id = #{productId}
    </update>

    <!-- Update product inventory -->
    <update id="updateInventory" parameterType="com.example.erp.dto.InventoryDTO">
        MERGE INTO inventory i
            USING (SELECT #{productId} as product_id, #{locationId} as location_id FROM dual) s
            ON (i.product_id = s.product_id AND i.location_id = s.location_id)
            WHEN MATCHED THEN
                UPDATE SET
                    i.quantity = #{quantity},
                    i.last_updated_by = #{lastUpdatedBy},
                    i.last_update_date = #{lastUpdateDate}
            WHEN NOT MATCHED THEN
                INSERT (
                        inventory_id,
                        product_id,
                        location_id,
                        quantity,
                        last_updated_by,
                        last_update_date
                    ) VALUES (
                                 inventory_seq.NEXTVAL,
                                 #{productId},
                                 #{locationId},
                                 #{quantity},
                                 #{lastUpdatedBy},
                                 #{lastUpdateDate}
                             )
    </update>

    <!-- Record inventory movement -->
    <insert id="insertInventoryMovement" parameterType="map">
        INSERT INTO inventory_movements (
            movement_id,
            product_id,
            location_id,
            movement_type,
            quantity,
            reference_id,
            remarks,
            created_by,
            creation_date
        ) VALUES (
                     inventory_movement_seq.NEXTVAL,
                     #{productId},
                     #{locationId},
                     #{movementType},
                     #{quantity},
                     #{referenceId, jdbcType=VARCHAR},
                     #{remarks, jdbcType=VARCHAR},
                     #{createdBy},
                     #{creationDate}
                 )
    </insert>

    <!-- Insert price history -->
    <insert id="insertPriceHistory" parameterType="com.example.erp.dto.PriceHistoryDTO">
        INSERT INTO product_price_history (
            history_id,
            product_id,
            old_price,
            new_price,
            change_date,
            changed_by,
            remarks
        ) VALUES (
                     price_history_seq.NEXTVAL,
                     #{productId},
                     #{oldPrice, jdbcType=NUMERIC},
                     #{newPrice},
                     #{changeDate},
                     #{changedBy},
                     #{remarks, jdbcType=VARCHAR}
                 )
    </insert>

    <!-- Insert product image -->
    <insert id="insertProductImage" parameterType="map">
        INSERT INTO product_images (
            image_id,
            product_id,
            image_url,
            image_type,
            is_primary,
            created_by,
            creation_date
        ) VALUES (
                     product_image_seq.NEXTVAL,
                     #{productId},
                     #{imageUrl},
                     #{imageType, jdbcType=VARCHAR},
                     #{isPrimary} ? 'Y' : 'N',
                     #{createdBy},
                     #{creationDate}
                 )
    </insert>

    <!-- Delete product categories -->
    <delete id="deleteProductCategories" parameterType="string">
        DELETE FROM product_categories
        WHERE product_id = #{productId}
    </delete>

    <!-- Insert product category -->
    <insert id="insertProductCategory" parameterType="map">
        INSERT INTO product_categories (
            category_assignment_id,
            product_id,
            category_id,
            created_by,
            creation_date
        ) VALUES (
                     product_category_seq.NEXTVAL,
                     #{productId},
                     #{categoryId},
                     #{createdBy},
                     #{creationDate}
                 )
    </insert>

    <!-- Get order detail by ID -->
    <select id="selectOrderDetail" parameterType="string" resultType="map">
        SELECT
            o.order_id AS orderId,
            o.order_no AS orderNo,
            o.customer_id AS customerId,
            c.customer_name AS customerName,
            c.email AS customerEmail,
            c.phone AS customerPhone,
            o.order_date AS orderDate,
            o.status,
            o.payment_status AS paymentStatus,
            o.shipping_status AS shippingStatus,
            o.total_amount AS totalAmount,
            o.discount_amount AS discountAmount,
            o.tax_amount AS taxAmount,
            o.net_amount AS netAmount,
            o.shipping_address AS shippingAddress,
            o.shipping_method AS shippingMethod,
            o.tracking_number AS trackingNumber,
            o.payment_method AS paymentMethod,
            o.payment_transaction_id AS paymentTransactionId,
            o.payment_date AS paymentDate,
            o.notes,
            o.created_by AS createdBy,
            o.creation_date AS creationDate,
            o.last_updated_by AS lastUpdatedBy,
            o.last_update_date AS lastUpdateDate
        FROM
            orders o
                JOIN
            customers c ON o.customer_id = c.customer_id
        WHERE
            o.order_id = #{orderId}
    </select>
</mapper>